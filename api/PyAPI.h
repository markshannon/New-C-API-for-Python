/* This file is generated by gen/__main__.py */

PyRef PyRef_MISSING;
PyRef PyRef_ERROR;

PyRef PyRef_Dup(PyRef ref);
void PyRef_Close(PyRef ref);
int PyRef_IsValid(PyRef ref);

int PyRef_IsMissing(PyRef ref);

int PyRef_IsError(PyRef ref);


/* Long from generate.objects */

PyLongRef PyNI_Long_FromInt32(PyContext ctx, int32_t val);

PyLongRef PyNI_Long_FromUInt32(PyContext ctx, int32_t val);

PyLongRef PyNI_Long_FromInt64(PyContext ctx, int32_t val);

PyLongRef PyNI_Long_FromUInt64(PyContext ctx, int32_t val);

int PyNI_Long_ToInt32(PyContext ctx, PyLongRef self, int32_t*);

int PyNI_Long_ToInt64(PyContext ctx, PyLongRef self, int64_t*);

bool PyNI_CanDownCastToLong(PyRef ref);
int PyNI_Long_IsError(PyLongRef ref);
PyRef PyNI_Long_UpCast(PyLongRef ref);
PyLongRef _PyNI_Long_UnsafeDownCast(PyRef ref);

#define PyNI_Long_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToLong(REF)) {\
    PyLongRef VAR = _PyNI_Long_UnsafeDownCast(REF);
    


/* Sequence from generate.objects */

/* Returns the item at `index`. Raises if index is out-of-bounds */
PyRef PyNI_Sequence_GetItem(PyContext ctx, PySequenceRef self, PyLongRef index);

/* Returns the item at `index`. Raises if index is out-of-bounds */
PyRef PyNI_Sequence_GetItem_i(PyContext ctx, PySequenceRef self, uintptr_t index);

uintptr_t PyNI_Sequence_GetSize(PyContext ctx, PySequenceRef self);

PyRef PyNI_Sequence_GetLength(PyContext ctx, PySequenceRef self);

bool PyNI_CanDownCastToSequence(PyRef ref);
int PyNI_Sequence_IsError(PySequenceRef ref);
PyRef PyNI_Sequence_UpCast(PySequenceRef ref);
PySequenceRef _PyNI_Sequence_UnsafeDownCast(PyRef ref);

#define PyNI_Sequence_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToSequence(REF)) {\
    PySequenceRef VAR = _PyNI_Sequence_UnsafeDownCast(REF);
    


/* Tuple from generate.objects */

/* Returns the empty tuple */
PyTupleRef PyNI_Tuple_Empty(PyContext ctx);

/* Returns a new non-empty tuple from `array`. `length` must be greater than zero */
PyTupleRef PyNI_Tuple_FromNonEmptyArray(PyContext ctx, PyRef array[], uintptr_t length);

/* Returns a new non-empty tuple from `array`. */
PyTupleRef PyNI_Tuple_FromArray(PyContext ctx, PyRef array[], uintptr_t length);

bool PyNI_CanDownCastToTuple(PyRef ref);
int PyNI_Tuple_IsError(PyTupleRef ref);
PyRef PyNI_Tuple_UpCast(PyTupleRef ref);
PyTupleRef _PyNI_Tuple_UnsafeDownCast(PyRef ref);

#define PyNI_Tuple_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToTuple(REF)) {\
    PyTupleRef VAR = _PyNI_Tuple_UnsafeDownCast(REF);
    


/* Dict from generate.objects */

PyRef PyNI_Dict_Get(PyContext ctx, PyDictRef self, PyRef key, PyRef default);

PyRef PyNI_Dict_GetItem(PyContext ctx, PyDictRef self, PyRef key);

PyRef PyNI_Dict_GetItem_s(PyContext ctx, PyDictRef self, PyRef key);

PyDictRef PyNI_Dict_New(PyContext ctx);

bool PyNI_CanDownCastToDict(PyRef ref);
int PyNI_Dict_IsError(PyDictRef ref);
PyRef PyNI_Dict_UpCast(PyDictRef ref);
PyDictRef _PyNI_Dict_UnsafeDownCast(PyRef ref);

#define PyNI_Dict_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToDict(REF)) {\
    PyDictRef VAR = _PyNI_Dict_UnsafeDownCast(REF);
    


/* List from generate.objects */

PyListRef PyNI_List_New(PyContext ctx);

int PyNI_List_Append(PyContext ctx, PyListRef self, PyRef item);

PyRef PyNI_List_Pop(PyContext ctx, PyListRef self);

/* Returns a new list from `array`. */
PyListRef PyNI_List_FromArray(PyContext ctx, PyRef array[], uintptr_t length);

/* Extends the list from `array`. */
PyListRef PyNI_List_ExtendArray(PyContext ctx, PyListRef self, PyRef array[], uintptr_t length);

int PyNI_List_Extend(PyContext ctx, PyListRef self, PyRef sequence);

int PyNI_List_Insert(PyContext ctx, PyListRef self, PyRef index, PyRef item);

int PyNI_List_Insert_i(PyContext ctx, PyListRef self, intptr_t index, PyRef item);

PyListRef PyNI_List_GetSlice(PyContext ctx, PyListRef self, intptr_t low, intptr_t high);

PyListRef PyNI_List_SetSlice(PyContext ctx, PyListRef self, intptr_t low, intptr_t high, PyRef sequence);

PyListRef PyNI_List_DelSlice(PyContext ctx, PyListRef self, intptr_t low, intptr_t high);

/* Return a new tuple created from this list */
PyTupleRef PyNI_List_AsTuple(PyContext ctx, PyListRef self);

/* Return a new tuple created from this list and clear this list.
This may be more efficient than creating the tuple, then freeing the list */
PyTupleRef PyNI_List_AsTupleAndClear(PyContext ctx, PyListRef self);

int PyNI_List_Reverse(PyContext ctx, PyListRef self);

int PyNI_List_Sort(PyContext ctx, PyListRef self);

void PyNI_List_Clear(PyContext ctx, PyListRef self);

bool PyNI_CanDownCastToList(PyRef ref);
int PyNI_List_IsError(PyListRef ref);
PyRef PyNI_List_UpCast(PyListRef ref);
PyListRef _PyNI_List_UnsafeDownCast(PyRef ref);

#define PyNI_List_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToList(REF)) {\
    PyListRef VAR = _PyNI_List_UnsafeDownCast(REF);
    

typedef PyRef (*PyNI_BinaryOperator_FuncPtr)(PyContext ctx, PyRef left, PyRef right);

typedef PyRef (*PyNI_VectorCall_FuncPtr)(PyContext ctx, PyRef callable, PyRef args[], intptr_t nargsf, PyTupleRef kwnames);


/* Str from generate.objects */

PyStrRef PyNI_Str_FromUtfString(PyContext ctx, const UtfString data, uintptr_t length);

PyStrRef PyNI_Str_Join(PyContext ctx, PyStrRef self, PyStrRef array[]);

PyRef PyNI_Str_GetItem(PyContext ctx, PyStrRef self, uintptr_t index);

uintptr_t PyNI_Str_GetSize(PyContext ctx, PyStrRef self);

bool PyNI_CanDownCastToStr(PyRef ref);
int PyNI_Str_IsError(PyStrRef ref);
PyRef PyNI_Str_UpCast(PyStrRef ref);
PyStrRef _PyNI_Str_UnsafeDownCast(PyRef ref);

#define PyNI_Str_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToStr(REF)) {\
    PyStrRef VAR = _PyNI_Str_UnsafeDownCast(REF);
    


/* Class from generate.objects */

int PyNI_Class_AddBinaryOperator(PyContext ctx, uint8_t op, PyNI_BinaryOperator_FuncPtr func);

int PyNI_Class_AddVectorCallMethod(PyContext ctx, PyStrRef name, PyNI_VectorCall_FuncPtr func);

PyRef PyNI_Class_New(PyContext ctx, PyClassRef self);

bool PyNI_CanDownCastToClass(PyRef ref);
int PyNI_Class_IsError(PyClassRef ref);
PyRef PyNI_Class_UpCast(PyClassRef ref);
PyClassRef _PyNI_Class_UnsafeDownCast(PyRef ref);

#define PyNI_Class_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToClass(REF)) {\
    PyClassRef VAR = _PyNI_Class_UnsafeDownCast(REF);
    

bool PyNI_IsNone(PyContext ctx, PyRef obj);

PyRef PyNI_None(PyContext ctx);

bool PyNI_IsTrue(PyContext ctx, PyRef obj);

PyRef PyNI_True(PyContext ctx);

bool PyNI_IsFalse(PyContext ctx, PyRef obj);

PyRef PyNI_False(PyContext ctx);

PyClassRef PyNI_IOError(PyContext ctx);

PyClassRef PyNI_bool(PyContext ctx);

PyClassRef PyNI_memoryview(PyContext ctx);

PyClassRef PyNI_bytearray(PyContext ctx);

PyClassRef PyNI_bytes(PyContext ctx);

PyClassRef PyNI_classmethod(PyContext ctx);

PyClassRef PyNI_complex(PyContext ctx);

PyClassRef PyNI_dict(PyContext ctx);

PyClassRef PyNI_enumerate(PyContext ctx);

PyClassRef PyNI_filter(PyContext ctx);

PyClassRef PyNI_float(PyContext ctx);

PyClassRef PyNI_frozenset(PyContext ctx);

PyClassRef PyNI_property(PyContext ctx);

PyClassRef PyNI_int(PyContext ctx);

PyClassRef PyNI_list(PyContext ctx);

PyClassRef PyNI_map(PyContext ctx);

PyClassRef PyNI_object(PyContext ctx);

PyClassRef PyNI_range(PyContext ctx);

PyClassRef PyNI_reversed(PyContext ctx);

PyClassRef PyNI_set(PyContext ctx);

PyClassRef PyNI_slice(PyContext ctx);

PyClassRef PyNI_staticmethod(PyContext ctx);

PyClassRef PyNI_str(PyContext ctx);

PyClassRef PyNI_super(PyContext ctx);

PyClassRef PyNI_tuple(PyContext ctx);

PyClassRef PyNI_type(PyContext ctx);

PyClassRef PyNI_zip(PyContext ctx);

PyClassRef PyNI_BaseException(PyContext ctx);

PyClassRef PyNI_BaseExceptionGroup(PyContext ctx);

PyClassRef PyNI_Exception(PyContext ctx);

PyClassRef PyNI_GeneratorExit(PyContext ctx);

PyClassRef PyNI_KeyboardInterrupt(PyContext ctx);

PyClassRef PyNI_SystemExit(PyContext ctx);

PyClassRef PyNI_ArithmeticError(PyContext ctx);

PyClassRef PyNI_AssertionError(PyContext ctx);

PyClassRef PyNI_AttributeError(PyContext ctx);

PyClassRef PyNI_BufferError(PyContext ctx);

PyClassRef PyNI_EOFError(PyContext ctx);

PyClassRef PyNI_ImportError(PyContext ctx);

PyClassRef PyNI_LookupError(PyContext ctx);

PyClassRef PyNI_MemoryError(PyContext ctx);

PyClassRef PyNI_NameError(PyContext ctx);

PyClassRef PyNI_OSError(PyContext ctx);

PyClassRef PyNI_ReferenceError(PyContext ctx);

PyClassRef PyNI_RuntimeError(PyContext ctx);

PyClassRef PyNI_StopAsyncIteration(PyContext ctx);

PyClassRef PyNI_StopIteration(PyContext ctx);

PyClassRef PyNI_SyntaxError(PyContext ctx);

PyClassRef PyNI_SystemError(PyContext ctx);

PyClassRef PyNI_TypeError(PyContext ctx);

PyClassRef PyNI_ValueError(PyContext ctx);

PyClassRef PyNI_Warning(PyContext ctx);

PyClassRef PyNI_FloatingPointError(PyContext ctx);

PyClassRef PyNI_OverflowError(PyContext ctx);

PyClassRef PyNI_ZeroDivisionError(PyContext ctx);

PyClassRef PyNI_BytesWarning(PyContext ctx);

PyClassRef PyNI_DeprecationWarning(PyContext ctx);

PyClassRef PyNI_EncodingWarning(PyContext ctx);

PyClassRef PyNI_FutureWarning(PyContext ctx);

PyClassRef PyNI_ImportWarning(PyContext ctx);

PyClassRef PyNI_PendingDeprecationWarning(PyContext ctx);

PyClassRef PyNI_ResourceWarning(PyContext ctx);

PyClassRef PyNI_RuntimeWarning(PyContext ctx);

PyClassRef PyNI_SyntaxWarning(PyContext ctx);

PyClassRef PyNI_UnicodeWarning(PyContext ctx);

PyClassRef PyNI_UserWarning(PyContext ctx);

PyClassRef PyNI_BlockingIOError(PyContext ctx);

PyClassRef PyNI_ChildProcessError(PyContext ctx);

PyClassRef PyNI_ConnectionError(PyContext ctx);

PyClassRef PyNI_FileExistsError(PyContext ctx);

PyClassRef PyNI_FileNotFoundError(PyContext ctx);

PyClassRef PyNI_InterruptedError(PyContext ctx);

PyClassRef PyNI_IsADirectoryError(PyContext ctx);

PyClassRef PyNI_NotADirectoryError(PyContext ctx);

PyClassRef PyNI_PermissionError(PyContext ctx);

PyClassRef PyNI_ProcessLookupError(PyContext ctx);

PyClassRef PyNI_TimeoutError(PyContext ctx);

PyClassRef PyNI_IndentationError(PyContext ctx);

PyClassRef PyNI_IndexError(PyContext ctx);

PyClassRef PyNI_KeyError(PyContext ctx);

PyClassRef PyNI_ModuleNotFoundError(PyContext ctx);

PyClassRef PyNI_NotImplementedError(PyContext ctx);

PyClassRef PyNI_PythonFinalizationError(PyContext ctx);

PyClassRef PyNI_RecursionError(PyContext ctx);

PyClassRef PyNI_UnboundLocalError(PyContext ctx);

PyClassRef PyNI_UnicodeError(PyContext ctx);

PyClassRef PyNI_BrokenPipeError(PyContext ctx);

PyClassRef PyNI_ConnectionAbortedError(PyContext ctx);

PyClassRef PyNI_ConnectionRefusedError(PyContext ctx);

PyClassRef PyNI_ConnectionResetError(PyContext ctx);

PyClassRef PyNI_TabError(PyContext ctx);

PyClassRef PyNI_UnicodeDecodeError(PyContext ctx);

PyClassRef PyNI_UnicodeEncodeError(PyContext ctx);

PyClassRef PyNI_UnicodeTranslateError(PyContext ctx);

PyClassRef PyNI_ExceptionGroup(PyContext ctx);

PyClassRef PyNI_EnvironmentError(PyContext ctx);

PyClassRef PyNI_IOError(PyContext ctx);


/* Bytes from generate.objects */

int PyNI_Bytes_GetItem(PyContext ctx, PyBytesRef self, uintptr_t index, uint8_t*);

PyBytesRef PyNI_Bytes_FromArray(PyContext ctx, const char * data, uintptr_t length);

int PyNI_Bytes_GetSize(PyContext ctx, PyBytesRef self, uintptr_t*);

bool PyNI_CanDownCastToBytes(PyRef ref);
int PyNI_Bytes_IsError(PyBytesRef ref);
PyRef PyNI_Bytes_UpCast(PyBytesRef ref);
PyBytesRef _PyNI_Bytes_UnsafeDownCast(PyRef ref);

#define PyNI_Bytes_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToBytes(REF)) {\
    PyBytesRef VAR = _PyNI_Bytes_UnsafeDownCast(REF);
    


/* StrBuilder from generate.objects */

PyStrBuilderRef PyNI_StrBuilder_New(PyContext ctx, uintptr_t capacity);

int PyNI_StrBuilder_AppendStr(PyContext ctx, PyRef Self, PyStrRef s);

int PyNI_StrBuilder_AppendUtf8String(PyContext ctx, PyRef Self, const UtfString s);

PyStrRef PyNI_StrBuilder_ToStr(PyContext ctx, PyRef Self);

bool PyNI_CanDownCastToStrBuilder(PyRef ref);
int PyNI_StrBuilder_IsError(PyStrBuilderRef ref);
PyRef PyNI_StrBuilder_UpCast(PyStrBuilderRef ref);
PyStrBuilderRef _PyNI_StrBuilder_UnsafeDownCast(PyRef ref);

#define PyNI_StrBuilder_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToStrBuilder(REF)) {\
    PyStrBuilderRef VAR = _PyNI_StrBuilder_UnsafeDownCast(REF);
    


/* TupleBuilder from generate.objects */

PyTupleBuilderRef PyNI_TupleBuilder_New(PyContext ctx, uintptr_t capacity);

int PyNI_TupleBuilder_Add(PyContext ctx, PyRef Self, PyRef item);

PyTupleRef PyNI_TupleBuilder_ToTuple(PyContext ctx, PyRef Self);

bool PyNI_CanDownCastToTupleBuilder(PyRef ref);
int PyNI_TupleBuilder_IsError(PyTupleBuilderRef ref);
PyRef PyNI_TupleBuilder_UpCast(PyTupleBuilderRef ref);
PyTupleBuilderRef _PyNI_TupleBuilder_UnsafeDownCast(PyRef ref);

#define PyNI_TupleBuilder_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToTupleBuilder(REF)) {\
    PyTupleBuilderRef VAR = _PyNI_TupleBuilder_UnsafeDownCast(REF);
    


/* Object from generate.objects */

PyRef PyNI_Object_GetItem(PyContext ctx, PyRef obj, PyRef key);

PyRef PyNI_Object_GetItem_i(PyContext ctx, PyRef obj, intptr_t key);

PyRef PyNI_Object_GetItem_s(PyContext ctx, PyRef obj, const UtfString key);

int PyNI_Object_SetItem(PyContext ctx, PyRef obj, PyRef key, PyRef value);

int PyNI_Object_SetItem_i(PyContext ctx, PyRef obj, intptr_t key, PyRef value);

int PyNI_Object_SetItem_s(PyContext ctx, PyRef obj, const UtfString key, PyRef value);

int PyNI_Object_DelItem(PyContext ctx, PyRef obj, PyRef key);

int PyNI_Object_DelItem_i(PyContext ctx, PyRef obj, intptr_t key);

int PyNI_Object_DelItem_s(PyContext ctx, PyRef obj, const UtfString key);

PyRef PyNI_Object_GetAttr(PyContext ctx, PyRef obj, PyRef attr);

PyRef PyNI_Object_GetAttr_s(PyContext ctx, PyRef obj, const UtfString attr);

int PyNI_Object_HasAttr(PyContext ctx, PyRef obj, PyRef attr);

int PyNI_Object_HasAttr_s(PyContext ctx, PyRef obj, const UtfString attr);

int PyNI_Object_SetAttr(PyContext ctx, PyRef obj, PyRef attr, PyRef value);

int PyNI_Object_SetAttr_s(PyContext ctx, PyRef obj, const UtfString attr, PyRef value);

int PyNI_Object_Contains(PyContext ctx, PyRef container, PyRef key);

PyClassRef PyNI_Object_Type(PyContext ctx, PyRef obj);

bool PyNI_Object_TypeCheck(PyContext ctx, PyRef obj, PyClassRef cls);

int PyNI_Object_IsInstance(PyContext ctx, PyRef obj, PyClassRef cls);

PyStrRef PyNI_Object_Repr(PyContext ctx, PyRef obj);

PyStrRef PyNI_Object_Str(PyContext ctx, PyRef obj);

PyNI_Str_FuncPtr PyNI_Object_ASCII(PyContext ctx, PyRef obj);

int PyNI_Object_Hash(PyContext ctx, PyRef obj, intptr_t*);

PyRef PyNI_Object_CallMethod(PyContext ctx, PyRef attr, PyRef args[], intptr_t nargsf);

int PyNI_Object_IsAnIter(PyContext ctx, PyRef obj);

int PyNI_Object_IsCallable(PyContext ctx, PyRef obj);

PyRef PyNI_Object_UnaryOp(PyContext ctx, uint8_t op, PyRef argument);

PyRef PyNI_Object_BinaryOp(PyContext ctx, uint8_t op, PyRef left, PyRef right);

PyRef PyNI_Object_Compare(PyContext ctx, uint8_t op, PyRef left, PyRef right);

int PyNI_Object_CompareBool(PyContext ctx, uint8_t op, PyRef left, PyRef right);



/* Exception from generate.objects */

PyExceptionRef PyNI_Exception_New(PyContext ctx, PyClassRef cls, const UtfString message);

PyExceptionRef PyNI_Exception_New_s(PyContext ctx, PyClassRef cls, PyRef message);

void PyNI_Exception_Fatal(PyContext ctx, const UtfString message);

PyRef PyNI_Exception_FromErrnoWithFilename(PyContext ctx, PyClassRef cls, const UtfString filename);

/* Always fails. Barring another error,
will raise the newly created exception.
 */
PyRef PyNI_Exception_RaiseNew(PyContext ctx, PyClassRef cls, const UtfString message);

/* Always fails. Barring another error,
will raise the newly created exception.
 */
PyRef PyNI_Exception_RaiseNew_s(PyContext ctx, PyClassRef cls, PyRef message);

/* Always fails. will raise `exc`. */
PyRef PyNI_Exception_Raise(PyContext ctx, PyExceptionRef self);

/* Raises a MemoryError */
PyRef PyNI_Exception_NoMemory(PyContext ctx);

/* If the immediately previous API call failed,
then return the exception set by that exception.
Otherwise:
    In debug mode, return an instance of APIMisuse.
    In release mode, return an arbitrary exception. */
PyExceptionRef PyNI_Exception_Get(PyContext ctx);

int PyNI_Exception_Matches(PyContext ctx, PyRef exc, PyClassRef exc_cls);

void PyNI_Exception_WriteUnraisable(PyContext ctx, PyRef exc);

int PyNI_Exception_Warn(PyContext ctx, PyRef category, const UtfString message, int stack_level);

bool PyNI_CanDownCastToException(PyRef ref);
int PyNI_Exception_IsError(PyExceptionRef ref);
PyRef PyNI_Exception_UpCast(PyExceptionRef ref);
PyExceptionRef _PyNI_Exception_UnsafeDownCast(PyRef ref);

#define PyNI_Exception_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToException(REF)) {\
    PyExceptionRef VAR = _PyNI_Exception_UnsafeDownCast(REF);
    


/* Call from generate.objects */

PyRef PyNI_Call_TupleDict(PyContext ctx, PyRef callable, PyTupleRef args, PyDictRef kwargs);

PyRef PyNI_Call_Vector(PyContext ctx, PyRef callable, PyRef args[], intptr_t nargsf, PyTupleRef kwnames);

PyRef PyNI_Call_Method(PyContext ctx, PystrRef name, PyRef args[], intptr_t nargsf, PyTupleRef kwnames);



/* Iter from generate.objects */

/*  Returns PyRef_MISSING if iterator is exhausted. PyRef_ERROR if there is an exception. */
PyRef PyNI_Iter_Next(PyContext ctx, PyRef obj);

PyRef PyNI_Iter_Send(PyContext ctx, PyRef obj);

/* Returns 0 for a yield, 1 for a return and -1 for an exception.
`*result` is set to the actual value yielded or returned.
In case of an exception `*result` is set to None.
This is more efficient than the plain `Send` function as there
is no need to wrap the return value in an exception.
 */
int PyNI_Iter_SendX(PyContext ctx, PyRef obj, PyRef* result);



/* Str from generate.objects */

PyStrRef PyNI_Str_FromUtfString(PyContext ctx, const UtfString data, uintptr_t length);

PyStrRef PyNI_Str_Join(PyContext ctx, PyStrRef self, PyStrRef array[]);

PyRef PyNI_Str_GetItem(PyContext ctx, PyStrRef self, uintptr_t index);

uintptr_t PyNI_Str_GetSize(PyContext ctx, PyStrRef self);

bool PyNI_CanDownCastToStr(PyRef ref);
int PyNI_Str_IsError(PyStrRef ref);
PyRef PyNI_Str_UpCast(PyStrRef ref);
PyStrRef _PyNI_Str_UnsafeDownCast(PyRef ref);

#define PyNI_Str_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToStr(REF)) {\
    PyStrRef VAR = _PyNI_Str_UnsafeDownCast(REF);
    


/* Code from generate.vm */

bool PyNI_CanDownCastToCode(PyRef ref);
int PyNI_Code_IsError(PyCodeRef ref);
PyRef PyNI_Code_UpCast(PyCodeRef ref);
PyCodeRef _PyNI_Code_UnsafeDownCast(PyRef ref);

#define PyNI_Code_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToCode(REF)) {\
    PyCodeRef VAR = _PyNI_Code_UnsafeDownCast(REF);
    


/* FrameStack from generate.vm */

PyRef PyNI_FrameStack_GetLocal(PyContext ctx, PyFrameStackRef self, uintptr_t depth, uintptr_t index);

PyRef PyNI_FrameStack_GetLocalByName(PyContext ctx, PyFrameStackRef self, uintptr_t depth, PyStrRef name);

PyRef PyNI_FrameStack_GetLocalByName_s(PyContext ctx, PyFrameStackRef self, uintptr_t depth, const UtfString name);

PyCodeRef PyNI_FrameStack_GetCode(PyContext ctx, PyFrameStackRef self, uintptr_t depth);

/* Gets the frame stack for the currently executing thread */
PyFrameStackRef PyNI_FrameStack_Get(PyContext ctx);

bool PyNI_CanDownCastToFrameStack(PyRef ref);
int PyNI_FrameStack_IsError(PyFrameStackRef ref);
PyRef PyNI_FrameStack_UpCast(PyFrameStackRef ref);
PyFrameStackRef _PyNI_FrameStack_UnsafeDownCast(PyRef ref);

#define PyNI_FrameStack_SAFE_DOWNCAST(REF, VAR) \
if (PyNI_CanDownCastToFrameStack(REF)) {\
    PyFrameStackRef VAR = _PyNI_FrameStack_UnsafeDownCast(REF);
    


/* Eval from generate.vm */


/* SourceKind from generate.vm */

typedef enum EvalSourceKind {
    Expr = 0,
    File = 1,
    Single = 2,
} EvalSourceKind;

PyCodeRef PyNI_Eval_Compile(PyContext ctx, PyRef src, PyRef filename, PySourceKindRef kind);

PyCodeRef PyNI_Eval_Compile_s(PyContext ctx, const UtfString src, const UtfString filename, PySourceKindRef kind);

PyRef PyNI_Eval_Eval(PyContext ctx, PyCodeRef code, PyDictRef globals, PyDictRef locals);



/* Enum from enum */

typedef enum Enum {
} Enum;

typedef PyRef (*PyNI_VectorCall_FuncPtr)(PyContext ctx, PyRef callable, PyRef args[], intptr_t nargsf, PyTupleRef kwnames);


/* CType from generate.types_and_modules */

typedef enum CType {
    U1 = 0,
    U2 = 1,
    U4 = 2,
    U8 = 3,
    UP = 7,
    I1 = 8,
    I2 = 9,
    I4 = 10,
    I8 = 11,
    IP = 15,
    BOOL = 16,
    F4 = 26,
    F8 = 27,
    GLOBAL = 34,
    POINTER = 39,
} CType;


/* FieldDescriptor from generate.types_and_modules */

typedef struct FieldDescriptor {
    const UtfString name,
    const UtfString doc,
    uint32_t offset,
    uint16_t flags,
    uint8_t type,
    PyNI_Getter_FuncPtr get,
    PyNI_Setter_FuncPtr set,
} FieldDescriptor;

typedef PyRef (*PyNI_Getter_FuncPtr)(PyContext ctx, PyRef obj, PyFieldDescriptorRef field, void* data);

typedef void (*PyNI_Setter_FuncPtr)(PyContext ctx, PyRef obj, PyFieldDescriptorRef field, void* data, PyRef value);


/* StructLayout from generate.types_and_modules */

typedef struct StructLayout {
    const UtfString name,
    PyFieldDescriptorRef *fields,
} StructLayout;


/* TypeSpec from generate.types_and_modules */


typedef void* (*PyNI_CFunctionPointer_FuncPtr)(PyContext ctx, void args[]);


/* FunctionDefinition from generate.types_and_modules */

typedef struct FunctionDefinition {
    const UtfString name,
    const UtfString doc,
    const UtfString signature,
    PyNI_CFunctionPointer_FuncPtr impl,
    PyNI_VectorCall_FuncPtr call,
} FunctionDefinition;


/* Module from generate.types_and_modules */


/* Def from generate.types_and_modules */

typedef struct ModuleDef {
    const UtfString doc,
    PyStructLayoutRef state,
    PyFunctionDefinitionRef *functions,
} ModuleDef;


